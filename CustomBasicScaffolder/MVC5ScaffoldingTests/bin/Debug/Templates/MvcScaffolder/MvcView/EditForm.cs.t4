﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>
 <!-- 输出form表单界面 -->
<fieldset>
    <div class="row">
<#
    int cols = FromLayoutCols;
    int col = 12/cols;
	int colindex= -1;
	int mod = 0;
    var entityName = ModelTypeName;
	var fields = FieldDisplayAttribute.Where(x=>x.EntityTypeName == entityName ).OrderBy(x=>x.Order).ToList();
	foreach(var item in fields)
	{
		string prompt = item.Prompt;
		string displayName = item.Name;
		string description = item.Description;
		var property = ModelMetadata.Properties.Where(n=>n.PropertyName==item.FieldName && !n.IsAssociation ).FirstOrDefault();
		if(property==null) continue;
		var isRequired = false;
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		string required = isRequired.ToString().ToLower();
		string maxLength = string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
		colindex ++ ;
		mod = colindex % cols;
#>
        <#
		//如果是主键
		if(property.IsPrimaryKey) {
			string autoGenerated =  property.IsAutoGenerated?"disabled":"" ; 
	    #>
	    <# if (property.ShortTypeName=="DateTime") { #>
        <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <i class="icon-append fa fa-calendar"></i>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>" 
                   type="text" 
                   class="datepicker" 
                   data-dateformat="dd/mm/yy"
                   readonly
             />
              <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
        </label>
        </section>
			  <# } else if (property.ShortTypeName=="string") { #>
           <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"  
                   type="text" 
                   readonly
                  />
                  <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
             </label>
        </section>
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   type="text" 
                   />
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
              <# } else { #>
              <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   type="text" 
                   />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } #>
			<# 
			  //如果是外键
			  } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
			   string  relatedmodelName =  relatedModel.EntitySetName;
			   string  relatedPKname = relatedModel.PrimaryKeyNames[0];
			   string  relatedDisplayFieldName = relatedModel.DisplayPropertyName;
			   string  url = "/" +  ControllerRootName + "/Get" +  relatedModel.EntitySetName ;
			#>
             <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				     />
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			<# } else {  #>
			  <# if (property.ShortTypeName=="DateTime") { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <i class="icon-append fa fa-calendar"></i>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   tabindex="<#= colindex.ToString() #>" 
				   class="datepicker" data-dateformat="dd/mm/yy"
				   type="text" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				    />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } else if (property.ShortTypeName=="string") { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				    type="text" 
				   />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   type="text" 
				   />
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
              <# } else if (property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean")  { #>
			  <section class="col col-<#= col #>">
              <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
              <label class="checkbox">
                 <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
                       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                       value="true" @(Model.<#= property.PropertyName #> ? "checked=\"checked\"" : "")
                       tabindex="6"
                       type="checkbox" />
                <i></i>
                <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
            </label>
            </section>
              <# } else { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
					name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                    placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
					value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
					tabindex="<#= colindex.ToString() #>" 
					type="text" 
					 />
                        <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
            </label>
            </section>
			  <# } #>
			<# } #>
	 
	  
	    
	<# } #>
    </div>
</fieldset>

<!--========================================================================================-->
 <#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
<fieldset>
    <div class="row">
        <section class="col col-md-12 col-lg-12">
    <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs">
<#
		var idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
			string subpropertyName = dic.Key;
			var submetadata =  dic.Value;
#>
				<#  if(idx==0)  {#>
				<li class="active"><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>
				<# } else { #>
				<li class=""><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>	 		 
				<# } #>
<# 
	    idx ++;
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		 <#
			idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
                var childrenmodelmeta = dic.Value;
				var subpropertyName = dic.Key;
          #>
		  <div id="tab-<#= subpropertyName.ToLower()   #>" class="tab-pane <#= idx>0?"":"active"  #>">
            <div class="panel-body">
                <div class="table-responsive">
				<table id="<#= subpropertyName.ToLower()  #>_datagrid" class="easyui-datagrid" title="<#= subpropertyName   #> DataGrid" style="width:auto;height:400px"
                       data-options="
                            rownumbers:true,
                            iconCls: 'fa fa-list',
                            remoteFilter: false,
                            singleSelect: true,
                            toolbar: '#<#= subpropertyName.ToLower() #>_toolbar',
                            method: 'get',
                            onClickCell: <#= subpropertyName.ToLower() #>_onClickCell,
                            pagination: 'true'
                    " >
                    <thead>
                        <tr>
						@*<th data-options="field:'ck',checkbox:true"></th>*@
				        <#
							IEnumerable<PropertyMetadata> subproperties = childrenmodelmeta.Properties;
							foreach (PropertyMetadata subproperty in subproperties) {
									var tdalign=subproperty.ShortTypeName=="string"?"left":"right";
									var fieldtypename = subproperty.ShortTypeName;
									var isRequired = false;
									fieldRequired.TryGetValue(subproperty.PropertyName, out isRequired);
									string required = isRequired.ToString().ToLower();
									string maxLength = string.Empty;
									fieldMaxLength.TryGetValue(subproperty.PropertyName,out maxLength);
									if (subproperty.Scaffold && !subproperty.IsAssociation) {
						#>
						<# if ( subproperty.IsPrimaryKey || subproperty.IsReadOnly) { #>
								@*<th data-options="field:'<#= subproperty.PropertyName  #>',width:80"> <#=  GetDisplayName(subproperty.PropertyName) #> </th>*@
						<# } else if (subproperty.IsForeignKey) { 
								string foreignKeyPropertyName = subproperty.PropertyName;
								RelatedModelMetadata relatedModel = childrenmodelmeta.RelatedEntities.Where(x=>x.ForeignKeyPropertyNames[0]==foreignKeyPropertyName).First();
								string relatedtypeName = relatedModel.ShortTypeName;
								if(relatedtypeName != ModelTypeName ) {
						#>
								<th data-options="field:'<#= foreignKeyPropertyName  #>',width:100,
												formatter:function(value,row){
													return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,childrenmodelmeta)  #>;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
														textField:'<#= relatedModel.DisplayPropertyName   #>',
														method:'get',
														url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
														required:<#= required  #> <#= maxLength #>
														}
												}"> <#= GetDisplayName(foreignKeyPropertyName) #> </th>
						<# } } else { #>
							<#
								if(fieldtypename=="string") {
							#>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:140,editor:{type:'textbox',options:{required:<#= required  #> <#= maxLength #>} } "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
									if(subproperty.PropertyName=="Status") {
						    #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:100,align:'right',
                                                 editor:{ type:'combobox',
                                                 options:{
                                                    panelHeight: 'auto',
                                                    data: [ { value: '0', text: '启用' },{ value: '1', text: '禁用' } ],
                                                    required:true } }  ,formatter:statusformatter"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   } else {  #>
									<th data-options="field:'<#=  subproperty.PropertyName  #>',width:100,align:'right',editor:{type:'numberbox',options:{required:<#= required  #> <#= maxLength #>} } ,sortable:true,resizable:true "><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   }   } else if(fieldtypename=="DateTime" ) { #>
								<th data-options="field:'<#=  subproperty.PropertyName  #>',width:160,align:'right',editor:{type:'datebox',options:{required:<#= required  #>}} ,formatter:dateformatter"> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="bool" || fieldtypename=="Boolean" ){ #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor: {type:'combobox'
                                                ,options:{
                                                panelHeight: 'auto',
                                                data: [ { value: 'true', text: 'true' },{ value: 'false', text: 'false' }],
                                                required:true}}"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else { #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor:'textbox' "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } #>
						<#     } #>
					<#
							}
					    //foreach (PropertyMetadata subproperty in subproperties) {
						}
					#>
                        </tr>
                    </thead>
                </table>
				<div id="<#= subpropertyName.ToLower() #>_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_createitem()">新增</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_removeitem()">删除</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_saveitem()">保存</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_reject()">取消</a>
                </div>
                </div>
            </div>
        </div>
		  <# idx++;
           }
		  #>
	</div>
	</div>
 
<!--end details tabs -->
        </section>
    </div>
</fieldset>
<#  } #>



 <script type="text/javascript">
  <#  if(GenerateMasterDetailRelationship  && OneToManyModelMetadata.Count >0) { 
	var primaryKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
#>

	  <# foreach(var item in OneToManyModelMetadata) {
                var boostraptablevar = "$" + item.Key.ToLower()  + "datagrid";
                var detailnamevar=item.Key.ToLower();
				var submodelmetadata =  item.Value;
				var editindex = detailnamevar + "editIndex";
      #>  
	//==============$("#<#= detailnamevar  #>_datagrid")=================// 
    var <#= boostraptablevar #> = $("#<#= detailnamevar  #>_datagrid")
	var <#= editindex #> = undefined;
    function <#= detailnamevar #>_endEditing() {
        if ( <#= editindex #> == undefined) { return true }
        if (<#= boostraptablevar #>.datagrid("validateRow", <#= editindex #>)) {
			<# 
				RelatedModelMetadata[] relmodelms = submodelmetadata.RelatedEntities;
				foreach(RelatedModelMetadata relmodelm in relmodelms) 
                {
					var fkeyname=relmodelm.ShortTypeName +  relmodelm.PrimaryKeyNames[0];
					var fdispname = relmodelm.ShortTypeName + relmodelm.DisplayPropertyName;
					string relatedtypeName = relmodelm.ShortTypeName;
				    if(relatedtypeName != ModelTypeName ) {
			#>
            var ed = <#= boostraptablevar #>.datagrid("getEditor", { index: <#= editindex #>, field: "<#= fkeyname #>" });
            var <#= fdispname #> = $(ed.target).combobox("getText");
            var <#= fkeyname #> = $(ed.target).combobox("getValue");
            <#= boostraptablevar #>.datagrid("getRows")[<#= editindex #>]["<#= fdispname #>"] = <#= fdispname #>;
            <#= boostraptablevar #>.datagrid("getRows")[<#= editindex #>]["<#= fkeyname #>"] = <#= fkeyname #>;
			<# 
               } }
			#>
			<#= boostraptablevar #>.datagrid("endEdit", <#= editindex #>);
            <#= editindex #> = undefined;
            return true;
        } else {
            return false;
        }
    }
    function <#= detailnamevar #>_onClickCell(index, field) {
        if (<#= editindex #> != index) {
            if (<#= detailnamevar #>_endEditing()) {
                <#= boostraptablevar #>.datagrid("selectRow", index)
                        .datagrid("beginEdit", index);
                 <#= editindex #>  = index;
                var ed = <#= boostraptablevar #>.datagrid("getEditor", { index: index, field: field });
                if (ed) {
                    ($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
                }
               
            } else {
                <#= boostraptablevar #>.datagrid("selectRow", <#= editindex #>);
            }
        }
    }
    function <#= detailnamevar #>_append() {
        if (<#= detailnamevar #>_endEditing()) {
            <#= boostraptablevar #>.datagrid("appendRow", { Status:0   });
            <#= detailnamevar #>editIndex = <#= boostraptablevar #>.datagrid("getRows").length - 1;
            <#= boostraptablevar #>.datagrid("selectRow", <#= editindex #> )
                    .datagrid("beginEdit", <#= editindex #>);
        }
    }
    function <#= detailnamevar #>_removeit() {
        if (<#= editindex #>  == undefined) { return }
        <#= boostraptablevar #>.datagrid("cancelEdit", <#= editindex #> )
                .datagrid("deleteRow", <#= editindex #> );
        <#= detailnamevar #>editIndex = undefined;
    }
    function <#= detailnamevar #>_reject() {
        <#= boostraptablevar #>.datagrid("rejectChanges");
        <#= editindex #>  = undefined;
    }
    function <#= detailnamevar #>_getChanges() {
        var rows = <#= boostraptablevar #>.datagrid("getChanges");
        alert(rows.length + " rows are changed!");
    }
	  <# } #>
	$(function () {
	<#
    if (GenerateMasterDetailRelationship) 
    {     
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany ) 
            {       
                var relmodemeta = OneToManyModelMetadata[property.PropertyName];
                var relatedEntities = relmodemeta.RelatedEntities;
                var foreignKeyNames = relatedEntities.Where(n=>n.EntitySetName ==ModelMetadata.EntitySetName).Select(n=>n.ForeignKeyPropertyNames).First();
                var foreignKeyName = foreignKeyNames[0];
				var boostraptablevar = "$" + property.PropertyName.ToLower()  + "datagrid";
    #>
		$.get("/<#= ControllerRootName  #>/Get<#= property.PropertyName #>By<#= foreignKeyName #>/" + @Model.Id,function(data){
            //console.log(data);
            <#= boostraptablevar #>.datagrid("loadData",data);
        })
	<# 
			}
        }
    }
	#>
	});

<# 
     }
 #>
 </script>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
