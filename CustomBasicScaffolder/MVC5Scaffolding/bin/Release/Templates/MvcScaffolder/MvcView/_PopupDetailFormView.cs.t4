﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; 
   var entityName = ModelTypeName;
   var foreignKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
   var foreignKey = ModelTypeName+ primaryKey;
#>
 <!-- 输出form表单界面 -->
 <div id="detailswindow" hidden="hidden" class="easyui-window" 
      title="明细数据" 
      data-options="modal:true,
                    closed:true,
                    iconcls:'icon-menu',
                    onOpen:resize" style="width:960px;height:520px">
    <form id="<#=entityName.ToLower()#>_form" class="smart-form easyui-form" method="post" data-options="novalidate:true">
 <table class="table table-bordered">
     <caption>
         <!--form toolbar-->
                <div id="form_toolbar" style="height:auto" class="datagrid-toolbar">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="saveitem()">保存</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="cancelitem()">取消</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-refresh',plain:true" onclick="refreshitem()">刷新</a>
                </div>
         <!--form toolbar-->
     </caption>
<#
    int cols = FromLayoutCols;
	int colindex= -1;
	int mod = 0;
   
	var fields = FieldDisplayAttribute.Where(x=>x.EntityTypeName == entityName ).OrderBy(x=>x.Order).ToList();
	foreach(var item in fields)
	{
		string prompt = item.Prompt;
		string displayName = item.Name;
		string description = item.Description;
		var property = ModelMetadata.Properties.Where(n=>n.PropertyName==item.FieldName && !n.IsAssociation ).FirstOrDefault();
		if(property==null) continue;
		var isRequired = false;
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		string required = isRequired.ToString().ToLower();
		string maxLength = string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
		colindex ++ ;
		mod = colindex % cols;
		if(mod==0){
#>
	    <tr>
      <# } #>
	   <td class="control-label">   @Html.DisplayNameFor(model => model.<#= property.PropertyName #>)  </td>
	   <td> 
			   <#
				//如果是主键
				if(property.IsPrimaryKey) {
				     string autoGenerated =  property.IsAutoGenerated?"disabled":"" ; 
			    #>
			   <# if (property.ShortTypeName=="DateTime") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>" 
                   class="easyui-datebox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                width:200,
                                 readonly:true,
                                 required:<#= required #>,
                                 formatter:dateformatter" />
			  <# } else if (property.ShortTypeName=="string") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"  
                   class="easyui-textbox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                width:200,
                                 readonly:true,
                                 required:<#= required #>
                                 <#= maxLength #>" />
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   class="easyui-numberbox" type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 readonly:true,
                                width:200,
                                 label:'',required:<#= required #> <#= maxLength #>" />
			  <# } else { #>
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   class="easyui-textbox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                width:200,
                                 required:<#= required #>
                                 readonly:true,
                                 <#= maxLength #>" />
			  <# } #>
			<# 
			  //如果是外键
			  } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
			   string  relatedmodelName =  relatedModel.EntitySetName;
			   string  relatedPKname = relatedModel.PrimaryKeyNames[0];
			   string  relatedDisplayFieldName = relatedModel.DisplayPropertyName;
			   string  url = "/" +  ControllerRootName + "/Get" +  relatedModel.EntitySetName ;
			#>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   class="easyui-combobox" data-options="
						prompt:'<#= prompt  #>' ,
						label:'' ,
                       width:200,
						required:<#= required #> ,
						valueField: '<#= relatedPKname #>',
						textField: '<#= relatedDisplayFieldName #>' ,
						url: '<#= url  #>' ,
						onSelect: function(item){
						//console.log(item);
				}">
			<# } else {  #>
			  <# if (property.ShortTypeName=="DateTime") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-datebox" 
				   type="text" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                width:200,
								 required:<#= required #>,
								 formatter:dateformatter" />
			  <# } else if (property.ShortTypeName=="string") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-textbox" 
				   type="text" 
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                width:200,
								 required:<#= required #> <#= maxLength #>" />
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-numberbox" 
				   type="text" 
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                width:200,
								 required:<#= required #> <#= maxLength #>" />
              <# } else if (property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean")  { #>
			   <label class="checkbox">
                 <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
                       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                       value="true" @(Model.<#= property.PropertyName #> ? "checked=\"checked\"" : "")
                       tabindex="6"
                       type="checkbox" />
                <i></i>
            </label>
              <# } else { #>
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
					name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
					value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
					tabindex="<#= colindex.ToString() #>" 
					class="easyui-textbox" 
					type="text" 
					data-options="prompt:'<#= prompt  #>',
					             label:'',
                                width:200,
								 required:<#= required #> <#= maxLength #>" />
			  <# } #>
			<# } #>
	   </td>
	   <# if(mod== (cols-1)) { #>
	   </tr>
	   <# }#>
<# } #>
	    <#   
		    int residues = cols-1 - mod;
            Console.WriteLine(residues);
            if (residues > 0)
            {
                for (int i = 0; i < residues; i++)
                {
	   #>
		<td></td> <td></td>
	<# } #>
	     </tr>
	<# } #>
    <tfoot>
        <tr>
        <tr>
    </tfoot>
</table>
</form>

<!--输出form表单界面-->
<!--========================================================================================-->
 <#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
    <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs bordered">
<#
		var idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
			string subpropertyName = dic.Key;
			var submetadata =  dic.Value;
#>
				<#  if(idx==0)  {#>
				<li class="active"><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>
				<# } else { #>
				<li class=""><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>	 		 
				<# } #>
<# 
	    idx ++;
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content padding-10">
		  <#
			idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
                var childrenmodelmeta = dic.Value;
				var subpropertyName = dic.Key;
          #>
		  <div id="tab-<#= subpropertyName.ToLower()   #>" class="tab-pane <#= idx>0?"":"active"  #>">
            <div class="panel-body">
                <div class="table-responsive">
				<table id="<#= subpropertyName.ToLower()  #>_datagrid" class="easyui-datagrid" 
                       style="width:auto;height:300px"
                       data-options="
                            rownumbers:true,
                            iconCls: 'fa fa-list',
                            remoteFilter: false,
                            singleSelect: true,
                            toolbar: '#<#= subpropertyName.ToLower() #>_toolbar',
                            method: 'get',
                            onClickCell: <#= subpropertyName.ToLower() #>_onClickCell,
                            pagination: 'true'
                    " >
                    <thead>
                        <tr>
						@*<th data-options="field:'ck',checkbox:true"></th>*@
				        <#
							IEnumerable<PropertyMetadata> subproperties = childrenmodelmeta.Properties;
							foreach (PropertyMetadata subproperty in subproperties) {
									var tdalign=subproperty.ShortTypeName=="string"?"left":"right";
									var fieldtypename = subproperty.ShortTypeName;
									var isRequired = false;
									fieldRequired.TryGetValue(subproperty.PropertyName, out isRequired);
									string required = isRequired.ToString().ToLower();
									string maxLength = string.Empty;
									fieldMaxLength.TryGetValue(subproperty.PropertyName,out maxLength);
									if (subproperty.Scaffold && !subproperty.IsAssociation) {
						#>
						<# if ( subproperty.IsPrimaryKey || subproperty.IsReadOnly) { #>
								@*<th data-options="field:'<#= subproperty.PropertyName  #>',width:80"> <#=  GetDisplayName(subproperty.PropertyName) #> </th>*@
						<# } else if (subproperty.IsForeignKey) { 
								string foreignKeyPropertyName = subproperty.PropertyName;
								RelatedModelMetadata relatedModel = childrenmodelmeta.RelatedEntities.Where(x=>x.ForeignKeyPropertyNames[0]==foreignKeyPropertyName).First();
								string relatedtypeName = relatedModel.ShortTypeName;
								if(relatedtypeName != ModelTypeName ) {
						#>
								<th data-options="field:'<#= foreignKeyPropertyName  #>',width:100,
												formatter:function(value,row){
													return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,childrenmodelmeta)  #>;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
														textField:'<#= relatedModel.DisplayPropertyName   #>',
														method:'get',
														url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
														required:<#= required  #> <#= maxLength #>
														}
												}"> <#= GetDisplayName(foreignKeyPropertyName) #> </th>
						<# } } else { #>
							<#
								if(fieldtypename=="string") {
							#>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:140,editor:{type:'textbox',options:{required:<#= required  #> <#= maxLength #>} } "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
									if(subproperty.PropertyName=="Status") {
						    #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:100,align:'right',
                                                 editor:{ type:'combobox',
                                                 options:{
                                                    panelHeight: 'auto',
                                                    data: [ { value: '0', text: '启用' },{ value: '1', text: '禁用' } ],
                                                    required:true } }  ,formatter:statusformatter"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   } else {  #>
									<th data-options="field:'<#=  subproperty.PropertyName  #>',width:100,align:'right',editor:{type:'numberbox',options:{required:<#= required  #> <#= maxLength #>} } ,sortable:true,resizable:true "><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   }   } else if(fieldtypename=="DateTime" ) { #>
								<th data-options="field:'<#=  subproperty.PropertyName  #>',width:160,align:'right',editor:{type:'datebox',options:{required:<#= required  #>}} ,formatter:dateformatter"> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="bool" || fieldtypename=="Boolean" ){ #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor: {type:'combobox'
                                                ,options:{
                                                panelHeight: 'auto',
                                                data: [ { value: 'true', text: 'true' },{ value: 'false', text: 'false' }],
                                                required:true}}"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else { #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor:'textbox' "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } #>
						<#     } #>
					<#
							}
					    //foreach (PropertyMetadata subproperty in subproperties) {
						}
					#>
                        </tr>
                    </thead>
                </table>
				<div id="<#= subpropertyName.ToLower() #>_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-plus',plain:true" onclick="<#= subpropertyName.ToLower() #>_createitem()">新增</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="<#= subpropertyName.ToLower() #>_removeitem()">删除</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="<#= subpropertyName.ToLower() #>_saveitem()">保存</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="<#= subpropertyName.ToLower() #>_reject()">取消</a>
                </div>
                </div>
            </div>
            </div>
		  <# idx++;
           }
		  #>
	</div>
	</div>
	 
<!--end details tabs -->
<#  } #>
</div>


<script type="text/javascript">
    //load data by foreign key
    function loadData(id,data){
         $('#<#= ModelTypeName.ToLower() #>_form').form('load', data);
         <#  if (GenerateMasterDetailRelationship && OneToManyModelMetadata.Count > 0) 
             {
              
				foreach (var prop in ModelMetadata.Properties.Where(x=>x.AssociationDirection == AssociationDirection.OneToMany)) 
				{
					var submetadata =  OneToManyModelMetadata[prop.PropertyName];
					var entitySetName = submetadata.EntitySetName;
					var entitySetNameToLower = submetadata.EntitySetName.ToLower();
					var subModeType = prop.ShortTypeName;
					var datagridelement = entitySetNameToLower + "_datagrid";
					var datagridvar = "$"+ entitySetNameToLower +  "dg";
					var editindex = entitySetNameToLower + "_editIndex";
					var detailnamevar = entitySetNameToLower;
					var subforeignKey = submetadata.RelatedEntities.Where(x=>x.ShortTypeName == ModelTypeName).First().ForeignKeyPropertyNames[0];
			 
         #>
                 <#= datagridvar #>.datagrid('reload', '/<#= entitySetName #>/GetDataBy<#= foreignKey #>?<#= foreignKeyVar #>='+ id);
                 <#= datagridvar #>.datagrid('resize');

         <# } } #>
    }
    //save item
    function saveitem() {
        if ($('#<#=entityName.ToLower()#>_form').form('enableValidation').form('validate')) {
            var item = $('#<#=entityName.ToLower()#>_form').serializeObject();

            $.post("/<#= ControllerRootName #>/Edit", item, function (response) {
                //console.log(response);						
                if (response.success) {
                    $.messager.alert("提示", "保存成功！");
                    $('#detailswindow').window('close');

                } else {
                    $.messager.alert("错误", "保存失败！" + response.err, "error");
                }
            }, "json").fail(function (response) {
                //console.log(response);						
                $.messager.alert("错误", "保存失败！", "error");
                //$dg.datagrid("reload");						
            });
        }
    }
    // cancel
    function cancelitem() {
        $('#detailswindow').window('close');
    }
    // reload
    function refreshitem() {
        $('#detailswindow').window('close');
    }
    //easyui window resize function
    function resize() {
         
    }


    <#  if(GenerateMasterDetailRelationship  && OneToManyModelMetadata.Count >0) 
			 { 
	 #>
         //-----------------------------------------------------------------------
		 // details datagrid functions
		 //-----------------------------------------------------------------------
			function filterBy<#= foreignKey  #>(<#= foreignKeyVar #>) {
			var value = <#= foreignKeyVar #>;

			   <# 
				foreach (var prop in ModelMetadata.Properties.Where(x=>x.AssociationDirection == AssociationDirection.OneToMany)) 
				{
					var submetadata =  OneToManyModelMetadata[prop.PropertyName];
					var entitySetName = submetadata.EntitySetName;
					var entitySetNameToLower = submetadata.EntitySetName.ToLower();
					var subModeType = prop.ShortTypeName;
					var datagridelement = entitySetNameToLower + "_datagrid";
					var datagridvar = "$"+ entitySetNameToLower +  "dg";
					var editindex = entitySetNameToLower + "_editIndex";
					var detailnamevar = entitySetNameToLower;
					var subforeignKey = submetadata.RelatedEntities.Where(x=>x.ShortTypeName == ModelTypeName).First().ForeignKeyPropertyNames[0];
				#>
			   <#= datagridvar #>.datagrid("removeFilterRule", "<#= subforeignKey #>");
			   <#= datagridvar #>.datagrid("addFilterRule", {
					field: "<#= subforeignKey #>",
					op: "equal",
					value: value
				});
			   <#= datagridvar #>.datagrid("doFilter");
			   <# } #>

		}
		 
				<# 
				foreach (var prop in ModelMetadata.Properties.Where(x=>x.AssociationDirection == AssociationDirection.OneToMany)) 
				{
					var submetadata =  OneToManyModelMetadata[prop.PropertyName];
					var entitySetName = submetadata.EntitySetName;
					var entitySetNameToLower = submetadata.EntitySetName.ToLower();
					var subModeType = prop.ShortTypeName;
					var datagridelement = entitySetNameToLower + "_datagrid";
					var datagridvar = "$"+ entitySetNameToLower +  "dg";
					var editindex = entitySetNameToLower + "_editIndex";
					var detailnamevar = entitySetNameToLower;
					var subforeignKey = submetadata.RelatedEntities.Where(x=>x.ShortTypeName == ModelTypeName).First().ForeignKeyPropertyNames[0];
				#>
				//--------------------------------------------------------------------
				// #<#=  datagridelement #> functions
				//--------------------------------------------------------------------
				var <#= datagridvar #> = $("#<#= datagridelement  #>");

				var <#= editindex #> = undefined;
		function <#= detailnamevar #>_reload() {
				<#= datagridvar #>.datagrid("reload");
			}
	function <#= detailnamevar #>_endEditing() {
		if ( <#= editindex #> == undefined) { return true }
		if (<#= datagridvar #>.datagrid("validateRow", <#= editindex #>)) {
			<# 
				RelatedModelMetadata[] relmodelms = submetadata.RelatedEntities;
				foreach(RelatedModelMetadata relmodelm in relmodelms) 
				{
					var fkeyname=relmodelm.ShortTypeName +  relmodelm.PrimaryKeyNames[0];
					var fdispname = relmodelm.ShortTypeName + relmodelm.DisplayPropertyName;
                    if (relmodelm.ShortTypeName != ModelTypeName){
			#>
			var ed = <#= datagridvar #>.datagrid("getEditor", { index: <#= editindex #>, field: "<#= fkeyname #>" });
			var <#= fdispname #> = $(ed.target).combobox("getText");
			var <#= fkeyname #> = $(ed.target).combobox("getValue");
		  
			<#= datagridvar #>.datagrid("getRows")[<#= editindex #>]["<#= fdispname #>"] = <#= fdispname #>;
			<#= datagridvar #>.datagrid("getRows")[<#= editindex #>]["<#= fkeyname #>"] = <#= fkeyname #>;
			
			
			<# 
				}}
			#>
			<#= datagridvar #>.datagrid("endEdit", <#= editindex #>);
			<#= editindex #> = undefined;


			return true;
		} else {
			return false;
		}
	}
	function <#= detailnamevar #>_onClickCell(index, field) {
		if (<#= editindex #> != index) {
			if (<#= detailnamevar #>_endEditing()) {
				<#= datagridvar #>.datagrid("selectRow", index)
						.datagrid("beginEdit", index);
                <#= editindex #>  = index;
				var ed = <#= datagridvar #>.datagrid("getEditor", { index: index, field: field });
				if (ed) {
					($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
				}
				
			} else {
				<#= datagridvar #>.datagrid("selectRow", <#= editindex #>);
			}
		}
	}
	function <#= detailnamevar #>_createitem() {
		if (<#= detailnamevar #>_endEditing()) {
			 var <#=  ModelTypeName.ToLower() #> = $dg.datagrid("getSelected");

			<#= datagridvar #>.datagrid("appendRow", { <#= subforeignKey #>:<#=  ModelTypeName.ToLower() #>.<#= primaryKey #>   });
			<#= detailnamevar #>editIndex = <#= datagridvar #>.datagrid("getRows").length - 1;
			<#= datagridvar #>.datagrid("selectRow", <#= editindex #> )
					.datagrid("beginEdit", <#= editindex #>);
		}
	}
	function <#= detailnamevar #>_removeitem() {
		if (<#= editindex #>  == undefined) { return }
		<#= datagridvar #>.datagrid("cancelEdit", <#= editindex #> )
				.datagrid("deleteRow", <#= editindex #> );
		<#= detailnamevar #>editIndex = undefined;
	}
   
	function <#= detailnamevar #>_reject() {
		<#= datagridvar #>.datagrid("rejectChanges");
		<#= editindex #>  = undefined;
	}
	function <#= detailnamevar #>_getChanges() {
		var rows = <#= datagridvar #>.datagrid("getChanges");
		alert(rows.length + " rows are changed!");
	}
	function <#= detailnamevar #>_saveitem() {
			if (<#= detailnamevar #>_endEditing()) {
				if (<#= datagridvar #>.datagrid("getChanges").length) {
					var inserted = <#= datagridvar #>.datagrid("getChanges", "inserted");
					var deleted = <#= datagridvar #>.datagrid("getChanges", "deleted");
					var updated = <#= datagridvar #>.datagrid("getChanges", "updated");
					var effectRow = new Object();
					if (inserted.length) {
						effectRow.inserted = inserted;
					}
					if (deleted.length) {
						effectRow.deleted = deleted;
					}
					if (updated.length) {
						effectRow.updated = updated;
					}
					//console.log(JSON.stringify(effectRow));
					$.post("/<#= entitySetName #>/SaveData", effectRow, function (response) {
						//console.log(response);
						if (response.Success) {
							$.messager.alert("提示", "提交成功！");
							<#= datagridvar #>.datagrid("acceptChanges");
							<#= datagridvar #>.datagrid("reload");
						}
					}, "json").fail(function (response) {
						//console.log(response);
						$.messager.alert("错误", "提交错误了！","error");
					  
					});
			  
				}

				//<#= datagridvar #>.datagrid("acceptChanges");
			}
		}

		$(function () {

			<#= datagridvar #>.datagrid("enableFilter", [
									]);

			//filterBy<#= foreignKey  #>(-1);
		})




				<# 
				}
				#>

		 <# 
			}
		 #>


</script>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
