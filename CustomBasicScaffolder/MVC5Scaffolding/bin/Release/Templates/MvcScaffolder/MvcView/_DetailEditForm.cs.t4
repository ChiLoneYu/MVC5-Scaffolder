<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="ViewDataTypeName" #>
<#@ parameter type="System.Boolean" name="IsPartialView" #>
<#@ parameter type="System.String" name="ModelNameSpace" #>
<#@ parameter type="System.String" name="ViewPrefix" #>
<#@ parameter type="System.String" name="ViewName" #>
<#@ parameter type="System.String" name="ProgramTitle" #>
<#@ parameter type="System.String" name="MasterModelTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string>" name="ModelDisplayNames" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, bool>" name="fieldRequired" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string>" name="fieldMaxLength" #>

@model <#= ViewDataTypeName #>

<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>

<div class="ibox-content">
 <!--输出form表单界面-->
 <table class="table table-bordered">
     <caption>
     </caption>
<#
     int cols = 2;
	 int colindex= -1;
	 int mod = 0;
     var entityName = ModelTypeName;
	 foreach (PropertyMetadata property in ModelMetadata.Properties.Where(x=>x.IsAssociation==false)) {
	    string prompt = ModelDisplayNames.ContainsKey(property.PropertyName)==true? ModelDisplayNames[property.PropertyName]:property.PropertyName;
		string displayName = prompt;
		string description = prompt;
		var isRequired = false;
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		string required = isRequired.ToString().ToLower();
		string maxLength = string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
		colindex ++ ;
		mod = colindex % cols;
		if(mod==0) {
#>
     <tr>
     <# } #>
	  
  <td class="control-label">   @Html.DisplayNameFor(model => model.<#= property.PropertyName #>)  </td>
	   <td> 
			   <#
				//如果是主键
				if(property.IsPrimaryKey) {
				     string autoGenerated =  property.IsAutoGenerated?"disabled":"" ; 
			   #>
					<# if (property.ShortTypeName=="DateTime") { #>
						<input <#= autoGenerated #> id="@Html.IdFor(model => model.<#= property.PropertyName #>)" name="@Html.NameFor(model => model.<#= property.PropertyName #>)" tabindex="<#= colindex.ToString() #>" style="width:100%" class="easyui-datebox" type="text" data-options="prompt:'<#= prompt  #>',label:'<#= displayName #>:',required:<#= required #>,formatter:dateformatter" />
					<# } else if (property.ShortTypeName=="string") { #>
						<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" name="@Html.NameFor(model => model.<#= property.PropertyName #>)" tabindex="<#= colindex.ToString() #>" style="width:100%" class="easyui-textbox" type="text" data-options="prompt:'<#= prompt  #>',label:'<#= displayName #>:',required:<#= required #> <#= maxLength #>" />
					<# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
						<input  <#= autoGenerated #>  id="@Html.IdFor(model => model.<#= property.PropertyName #>)" name="@Html.NameFor(model => model.<#= property.PropertyName #>)" tabindex="<#= colindex.ToString() #>" style="width:100%" class="easyui-numberbox" type="text" data-options="prompt:'<#= prompt  #>',label:'<#= displayName #>:',required:<#= required #> <#= maxLength #>" />
					<# } else { #>
						<input  <#= autoGenerated #>  id="@Html.IdFor(model => model.<#= property.PropertyName #>)" name="@Html.NameFor(model => model.<#= property.PropertyName #>)" tabindex="<#= colindex.ToString() #>" style="width:100%" class="easyui-textbox" type="text" data-options="prompt:'<#= prompt  #>',label:'<#= displayName #>:',required:<#= required #> <#= maxLength #>" />
					<# } #>
			  <#	//如果是外键
			    } else if (property.IsForeignKey) { 
					string foreignKeyPropertyName = property.PropertyName;
					RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
					string  relatedmodelName =  relatedModel.EntitySetName;
					string  relatedPKname = relatedModel.PrimaryKeyNames[0];
					string  relatedDisplayFieldName = relatedModel.DisplayPropertyName;
					string  url = "/" +  ControllerRootName + "/Get" +  relatedModel.EntitySetName ;
			  #>

			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   class="easyui-combobox" data-options="
						prompt:'<#= prompt  #>' ,
						label:'<#= displayName #>:' ,
						required:<#= required #> ,
						valueField: '<#= relatedPKname #>',
						textField: '<#= relatedDisplayFieldName #>' ,
						url: '<#= url  #>' ,
						onSelect: function(item){
						//console.log(item);
				}">

				<# } else {  #>

					<# if (property.ShortTypeName=="DateTime") { #>
						<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
							name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
							tabindex="<#= colindex.ToString() #>" 
							style="width:100%" class="easyui-datebox" 
							type="text" 
							value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
							data-options="prompt:'<#= prompt  #>',
								 label:'<#= displayName #>:',
								 required:<#= required #>,
								 formatter:dateformatter" />
					<# } else if (property.ShortTypeName=="string") { #>
						<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
							name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
							value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
							tabindex="<#= colindex.ToString() #>" 
							style="width:100%" 
							class="easyui-textbox" 
							type="text" 
							data-options="prompt:'<#= prompt  #>',
								 label:'<#= displayName #>:',
								 required:<#= required #> <#= maxLength #>" />
					<# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
						<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
							name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
							value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
							tabindex="<#= colindex.ToString() #>" 
							style="width:100%" 
							class="easyui-numberbox" 
							type="text" 
							 data-options="prompt:'<#= prompt  #>',
								 label:'<#= displayName #>:',
								 required:<#= required #> <#= maxLength #>" />
					<# } else { #>
						<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
							name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
							value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
							tabindex="<#= colindex.ToString() #>" 
							style="width:100%" 
							class="easyui-textbox" 
							type="text" 
							data-options="prompt:'<#= prompt  #>',
					             label:'<#= displayName #>:',
								 required:<#= required #> <#= maxLength #>" />
					<# } #>
             
			 <# } #>

<# } #>
	    <#   
		    int residues = cols-1 - mod;
            Console.WriteLine(residues);
            if (residues > 0)
            {
                for (int i = 0; i < residues; i++)
                {
				#>
					<td></td> <td></td>
			 <# } #>
			</tr>
		 <# } #>
    @*<tfoot>
        <tr>
           
        <tr>
    </tfoot>*@
</table>
</div>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
 