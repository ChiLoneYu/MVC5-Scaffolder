﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>
 <!-- 输出form表单界面 -->
 <table class="table table-bordered">
     <caption>
        @{
        //TODO: fix edit form commonent!
        }
        <div class="alert alert-warning no-margin fade in">
            <button class="close" data-dismiss="alert">
                ×
            </button>
            <i class="fa-fw fa fa-info"></i>
            A combined table effect with all classes mentioned above added to
        </div>
     </caption>
<#
    int cols = FromLayoutCols;
	int colindex= -1;
	int mod = 0;
    var entityName = ModelTypeName;
	var fields = FieldDisplayAttribute.Where(x=>x.EntityTypeName == entityName ).OrderBy(x=>x.Order).ToList();
	foreach(var item in fields)
	{
		string prompt = item.Prompt;
		string displayName = item.Name;
		string description = item.Description;
		var property = ModelMetadata.Properties.Where(n=>n.PropertyName==item.FieldName && !n.IsAssociation ).FirstOrDefault();
		if(property==null) continue;
		var isRequired = false;
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		string required = isRequired.ToString().ToLower();
		string maxLength = string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
		colindex ++ ;
		mod = colindex % cols;
		if(mod==0){
#>
	    <tr>
      <# } #>
	   <td class="control-label">   @Html.DisplayNameFor(model => model.<#= property.PropertyName #>)  </td>
	   <td> 
			   <#
				//如果是主键
				if(property.IsPrimaryKey) {
				     string autoGenerated =  property.IsAutoGenerated?"disabled":"" ; 
			    #>
			   <# if (property.ShortTypeName=="DateTime") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>" 
                   class="easyui-datebox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                 width:300,
                                 readonly:true,
                                 required:<#= required #>,
                                 formatter:dateformatter" />
			  <# } else if (property.ShortTypeName=="string") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"  
                   class="easyui-textbox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                 width:300,
                                 readonly:true,
                                 required:<#= required #>
                                 <#= maxLength #>" />
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   class="easyui-numberbox" type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 readonly:true,
                                 width:300,
                                 label:'',required:<#= required #> <#= maxLength #>" />
			  <# } else { #>
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   class="easyui-textbox" 
                   type="text" 
                   data-options="prompt:'<#= prompt  #>',
                                 label:'',
                                 width:300,
                                 required:<#= required #>
                                 readonly:true,
                                 <#= maxLength #>" />
			  <# } #>
			<# 
			  //如果是外键
			  } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
			   string  relatedmodelName =  relatedModel.EntitySetName;
			   string  relatedPKname = relatedModel.PrimaryKeyNames[0];
			   string  relatedDisplayFieldName = relatedModel.DisplayPropertyName;
			   string  url = "/" +  ControllerRootName + "/Get" +  relatedModel.EntitySetName ;
			#>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   class="easyui-combobox" data-options="
						prompt:'<#= prompt  #>' ,
						label:'' ,
                        width:300,
						required:<#= required #> ,
						valueField: '<#= relatedPKname #>',
						textField: '<#= relatedDisplayFieldName #>' ,
						url: '<#= url  #>' ,
						onSelect: function(item){
						//console.log(item);
				}">
			<# } else {  #>
			  <# if (property.ShortTypeName=="DateTime") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-datebox" 
				   type="text" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                 width:300,
								 required:<#= required #>,
								 formatter:dateformatter" />
			  <# } else if (property.ShortTypeName=="string") { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-textbox" 
				   type="text" 
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                 width:300,
								 required:<#= required #> <#= maxLength #>" />
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   class="easyui-numberbox" 
				   type="text" 
				   data-options="prompt:'<#= prompt  #>',
								 label:'',
                                 width:300,
								 required:<#= required #> <#= maxLength #>" />
              <# } else if (property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean")  { #>
			   <label class="checkbox">
                 <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
                       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                       value="true" @(Model.<#= property.PropertyName #> ? "checked=\"checked\"" : "")
                       tabindex="6"
                       type="checkbox" />
                <i></i>
            </label>
              <# } else { #>
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
					name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
					value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
					tabindex="<#= colindex.ToString() #>" 
					class="easyui-textbox" 
					type="text" 
					data-options="prompt:'<#= prompt  #>',
					             label:'',
                                 width:300,
								 required:<#= required #> <#= maxLength #>" />
			  <# } #>
			<# } #>
	   </td>
	   <# if(mod== (cols-1)) { #>
	   </tr>
	   <# }#>
<# } #>
	    <#   
		    int residues = cols-1 - mod;
            Console.WriteLine(residues);
            if (residues > 0)
            {
                for (int i = 0; i < residues; i++)
                {
	   #>
		<td></td> <td></td>
	<# } #>
	     </tr>
	<# } #>
    <tfoot>
        <tr>
        <tr>
    </tfoot>
</table>
  <!--输出form表单界面-->
<!--========================================================================================-->
 <#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
    <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs">
<#
		var idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
			string subpropertyName = dic.Key;
			var submetadata =  dic.Value;
#>
				<#  if(idx==0)  {#>
				<li class="active"><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>
				<# } else { #>
				<li class=""><a data-toggle="tab" href="#tab-<#= subpropertyName.ToLower()  #>"> <#= subpropertyName #></a></li>	 		 
				<# } #>
<# 
	    idx ++;
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		 <#
			idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
                var childrenmodelmeta = dic.Value;
				var subpropertyName = dic.Key;
          #>
		  <div id="tab-<#= subpropertyName.ToLower()   #>" class="tab-pane <#= idx>0?"":"active"  #>">
            <div class="panel-body">
                <div class="table-responsive">
				<table id="<#= subpropertyName.ToLower()  #>_datagrid" class="easyui-datagrid" title="<#= subpropertyName   #> DataGrid" style="width:auto;height:400px"
                       data-options="
                            rownumbers:true,
                            iconCls: 'fa fa-list',
                            remoteFilter: false,
                            singleSelect: true,
                            toolbar: '#<#= subpropertyName.ToLower() #>_toolbar',
                            method: 'get',
                            onClickCell: <#= subpropertyName.ToLower() #>_onClickCell,
                            pagination: 'true'
                    " >
                    <thead>
                        <tr>
						@*<th data-options="field:'ck',checkbox:true"></th>*@
				        <#
							IEnumerable<PropertyMetadata> subproperties = childrenmodelmeta.Properties;
							foreach (PropertyMetadata subproperty in subproperties) {
									var tdalign=subproperty.ShortTypeName=="string"?"left":"right";
									var fieldtypename = subproperty.ShortTypeName;
									var isRequired = false;
									fieldRequired.TryGetValue(subproperty.PropertyName, out isRequired);
									string required = isRequired.ToString().ToLower();
									string maxLength = string.Empty;
									fieldMaxLength.TryGetValue(subproperty.PropertyName,out maxLength);
									if (subproperty.Scaffold && !subproperty.IsAssociation) {
						#>
						<# if ( subproperty.IsPrimaryKey || subproperty.IsReadOnly) { #>
								@*<th data-options="field:'<#= subproperty.PropertyName  #>',width:80"> <#=  GetDisplayName(subproperty.PropertyName) #> </th>*@
						<# } else if (subproperty.IsForeignKey) { 
								string foreignKeyPropertyName = subproperty.PropertyName;
								RelatedModelMetadata relatedModel = childrenmodelmeta.RelatedEntities.Where(x=>x.ForeignKeyPropertyNames[0]==foreignKeyPropertyName).First();
								string relatedtypeName = relatedModel.ShortTypeName;
								if(relatedtypeName != ModelTypeName ) {
						#>
								<th data-options="field:'<#= foreignKeyPropertyName  #>',width:100,
												formatter:function(value,row){
													return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,childrenmodelmeta)  #>;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
														textField:'<#= relatedModel.DisplayPropertyName   #>',
														method:'get',
														url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
														required:<#= required  #> <#= maxLength #>
														}
												}"> <#= GetDisplayName(foreignKeyPropertyName) #> </th>
						<# } } else { #>
							<#
								if(fieldtypename=="string") {
							#>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:140,editor:{type:'textbox',options:{required:<#= required  #> <#= maxLength #>} } "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
									if(subproperty.PropertyName=="Status") {
						    #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:100,align:'right',
                                                 editor:{ type:'combobox',
                                                 options:{
                                                    panelHeight: 'auto',
                                                    data: [ { value: '0', text: '启用' },{ value: '1', text: '禁用' } ],
                                                    required:true } }  ,formatter:statusformatter"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   } else {  #>
									<th data-options="field:'<#=  subproperty.PropertyName  #>',width:100,align:'right',editor:{type:'numberbox',options:{required:<#= required  #> <#= maxLength #>} } ,sortable:true,resizable:true "><#= GetDisplayName(subproperty.PropertyName) #></th>
							<#   }   } else if(fieldtypename=="DateTime" ) { #>
								<th data-options="field:'<#=  subproperty.PropertyName  #>',width:160,align:'right',editor:{type:'datebox',options:{required:<#= required  #>}} ,formatter:dateformatter"> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else if(fieldtypename=="bool" || fieldtypename=="Boolean" ){ #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor: {type:'combobox'
                                                ,options:{
                                                panelHeight: 'auto',
                                                data: [ { value: 'true', text: 'true' },{ value: 'false', text: 'false' }],
                                                required:true}}"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else { #>
								<th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor:'textbox' "> <#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } #>
						<#     } #>
					<#
							}
					    //foreach (PropertyMetadata subproperty in subproperties) {
						}
					#>
                        </tr>
                    </thead>
                </table>
				<div id="<#= subpropertyName.ToLower() #>_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-plus',plain:true" onclick="<#= subpropertyName.ToLower() #>_createitem()">新增</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="<#= subpropertyName.ToLower() #>_removeitem()">删除</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="<#= subpropertyName.ToLower() #>_saveitem()">保存</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="<#= subpropertyName.ToLower() #>_reject()">取消</a>
                </div>
                </div>
            </div>
        </div>
		  <# idx++;
           }
		  #>
	</div>
	</div>
 
<!--end details tabs -->

<#  } #>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
